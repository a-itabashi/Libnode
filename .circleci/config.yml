version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    parallelism: 3 # run three instances of this job in parallel
    docker: # run the steps with Docker
      - image: circleci/ruby:2.5.5
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: root
      - image: circleci/postgres:10.5-alpine # database image
        environment: # environment variables for database
          POSTGRES_USER: root
          POSTGRES_DB: libnode_test
          POSTGRES_PASSWORD: password
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundle
            bundle -v

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      - run: bundle exec rubocop

      - run: bundle exec brakeman

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database create
          command: bin/rails db:create

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      - run:
          name: run tests
          command: bundle exec rspec spec/models

      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results

      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy config
  deploy:
    docker:
      - image: cdssnc/aws-cli
    steps:
      - run:
          name: "Set AWS region"
          command: aws configure set region ap-northeast-1
      - run:
          name: "Run AWS CodeDeploy"
          command: aws deploy create-deployment --application-name ${DEPLOY_APPLICATION} --deployment-group-name ${DEPLOY_GROUP} --github-location repository="${DEPLOY_REPOSITORY}",commitId="${CIRCLE_SHA1}"
workflows:
  version: 2
  build_deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only: master
